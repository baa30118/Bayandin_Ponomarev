from connect_to_DB import *
import json
from flask import *


app = Flask(__name__)

def valid_JSON(data):
    parsed_data = []
    for item in data:
        valid_json_str = item.replace("'", '"')

        # Парсим каждый объект
        try:
            parsed_item = json.loads(valid_json_str)
            parsed_data.append(parsed_item)
        except json.JSONDecodeError as e:
            print(f"Ошибка парсинга: {e}")
    return parsed_data




@app.route("/service/cars", methods=['GET'])
def GET_all_cars_and_accidents():
    result = load(0, ">")
    cars_with_accidents = []

    for car_data in result[0]:
        id, model, year, color, plate_number, car_type = car_data

        car_info = Car(
            id=id,
            model=model,
            year=year,
            color=color,
            plate_number=plate_number,
            car_type=car_type
        )

        # Ищем аварии для текущей машины
        car_accident_info = []
        for i in result[1]:
            id, id_car, plate_num_cars, date, damage_description = i
            accidentc = Accident(
            id = id,
            id_car = id_car,
            plate_num_cars = plate_num_cars,
            date = date,
            damage_description = damage_description
            )
            car_accident_info.append(accidentc)
        # Создаем объединенный объект
        cars_with_accidents.append(
            CarWithAccidents(car=car_info, accidents=car_accident_info).model_dump_json())


        parsed_data = valid_JSON(cars_with_accidents)

    return parsed_data



@app.route("/service/accidents", methods=['GET'])
def GET_all_accidents():
    result = load(0, ">")
    car_accident_info = []
    for i in result[1]:
        id, id_car, plate_num_cars, date, damage_description = i
        accidentc = Accident(
            id=id,
            id_car=id_car,
            plate_num_cars=plate_num_cars,
            date=date,
            damage_description=damage_description
        )
        car_accident_info.append(accidentc.model_dump_json())


        parsed_data = valid_JSON(car_accident_info)

    return parsed_data


@app.route("/service/cars/<int:id>", methods=['GET'])
def GET_cars_and_accident_by_id(id):
    print(type(id))
    result = load(int(id))
    id, model, year, color, plate_number, car_type = result[0][0]

    car_info = Car(
        id=id,
        model=model,
        year=year,
        color=color,
        plate_number=plate_number,
        car_type=car_type
    )

    car_accident_info = []
    for i in result[1]:
        id, id_car, plate_num_cars, date, damage_description = i
        accidentc = Accident(
            id=id,
            id_car=id_car,
            plate_num_cars=plate_num_cars,
            date=date,
            damage_description=damage_description
        )
        car_accident_info.append(accidentc)
    res = CarWithAccidents(
        car=car_info,
        accidents=car_accident_info).model_dump_json()

    return json.loads(res)


@app.route("/service/accidents/<int:id>", methods=['GET'])
def GET_accident_by_id(id):
    result = load_accident(id)
    id, id_car, plate_num_cars, date, damage_description = result[0]
    res = Accident(
        id=id,
        id_car=id_car,
        plate_num_cars=plate_num_cars,
        date=date,
        damage_description=damage_description
    )

    return json.loads(res.model_dump_json())

@app.route("/service/cars", methods=['POST'])
def POST_add_car():

    data = request.get_json()

    model = data['model']
    year = data['year']
    color = data['color']
    plate_number = data['plate_number']
    car_type = data['car_type']

    if model and year and color and plate_number and car_type:
        save((model, year, color, plate_number, car_type))
        return "OK"
    return "Something went wrong"


@app.route("/service/accident/", methods=['POST'])
def POST_add_accident():

    data = request.get_json()
    plate_number = data['plate_number']
    plate_num_cars = data['plate_num_cars']
    date = data['date']
    damage_description = data['damage_description']

    if plate_number and plate_num_cars and date and damage_description:
        add_accidents(
            plate_number=plate_number,
            car_accidents=(plate_num_cars, date, damage_description)
        )
        return "OK"
    return "Something went wrong"


if __name__ == '__main__':
 app.run(port=8080, host='127.0.0.1')