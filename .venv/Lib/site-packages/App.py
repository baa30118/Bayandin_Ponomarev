from connect_to_DB import *
import json
from flask import Flask


app = Flask(__name__)

def valid_JSON(data):
    parsed_data = []
    for item in data:
        valid_json_str = item.replace("'", '"')

        # Парсим каждый объект
        try:
            parsed_item = json.loads(valid_json_str)
            parsed_data.append(parsed_item)
        except json.JSONDecodeError as e:
            print(f"Ошибка парсинга: {e}")
    return parsed_data




@app.route("/service/cars", methods=['GET'])
def GET_all_cars_and_accidents():
    result = load(0, ">")
    cars_with_accidents = []

    for car_data in result[0]:
        id, model, year, color, plate_number, car_type = car_data

        car_info = Car(
            id=id,
            model=model,
            year=year,
            color=color,
            plate_number=plate_number,
            car_type=car_type
        )

        # Ищем аварии для текущей машины
        car_accident_info = []
        for i in result[1]:
            id, id_car, plate_num_cars, date, damage_description = i
            accidentc = Accident(
            id = id,
            id_car = id_car,
            plate_num_cars = plate_num_cars,
            date = date,
            damage_description = damage_description
            )
            car_accident_info.append(accidentc)
        # Создаем объединенный объект
        cars_with_accidents.append(
            CarWithAccidents(car=car_info, accidents=car_accident_info).model_dump_json())


        parsed_data = valid_JSON(cars_with_accidents)

    return parsed_data



@app.route("/service/accidents", methods=['GET'])
def GET_all_accidents():
    result = load(0, ">")
    car_accident_info = []
    for i in result[1]:
        id, id_car, plate_num_cars, date, damage_description = i
        accidentc = Accident(
            id=id,
            id_car=id_car,
            plate_num_cars=plate_num_cars,
            date=date,
            damage_description=damage_description
        )
        car_accident_info.append(accidentc.model_dump_json())


        parsed_data = valid_JSON(car_accident_info)

    return parsed_data


@app.route("/service/cars/{id}", methods=['GET'])
def GET_cars_and_accident_by_id(id):
    result = load(id)
    id, model, year, color, plate_number, car_type = result[0][0]

    car_info = Car(
        id=id,
        model=model,
        year=year,
        color=color,
        plate_number=plate_number,
        car_type=car_type
    )

    car_accident_info = []
    for i in result[1]:
        id, id_car, plate_num_cars, date, damage_description = i
        accidentc = Accident(
            id=id,
            id_car=id_car,
            plate_num_cars=plate_num_cars,
            date=date,
            damage_description=damage_description
        )
        car_accident_info.append(accidentc)
    res = CarWithAccidents(
        car=car_info,
        accidents=car_accident_info).model_dump_json()

    return json.loads(res)


@app.route("/service/accidents/{id}", methods=['GET'])
def GET_accident_by_id(id):
    result = load_accident(id)
    id, id_car, plate_num_cars, date, damage_description = result[0]
    res = Accident(
        id=id,
        id_car=id_car,
        plate_num_cars=plate_num_cars,
        date=date,
        damage_description=damage_description
    )

    return json.loads(res.model_dump_json())

@app.route("/service/cars", methods=['POST'])
def POST_add_car(model, year, color, plate_number, car_type):
    save((model, year, color, plate_number, car_type))

@app.route("/service/accident", methods=['POST'])
def POST_add_accident(plate_number, plate_num_cars, date, damage_description):
    add_accidents(plate_number, (plate_num_cars, date, damage_description))






# print(GET_all_accidents())
# print(GET_all_cars_and_accidents())
# print(GET_cars_by_id(1))
# print(GET_accident_by_id(2))


# # ... предыдущий код (модели, подключение к БД, старые роуты) ...
#
# @app.route('/service/cars/{car_id}', methods=['PUT'])
# def update_car(car_id):
#     try:
#         # Валидация данных
#         update_data = CarCreate(**request.get_json())
#
#         conn = get_db_connection()
#         cur = conn.cursor()
#
#         # Обновление машины
#         cur.execute(
#             """
#             UPDATE bayandin_ponomarev.cars
#             SET model = %s, year = %s, color = %s,
#                 plate_number = %s, car_type = %s
#             WHERE id = %s
#             RETURNING id;
#             """,
#             (update_data.model, update_data.year, update_data.color,
#              update_data.plate_number, update_data.car_type, car_id)
#         )
#
#         if not cur.fetchone():
#             return jsonify({"error": "Car not found"}), 404
#
#         conn.commit()
#         return jsonify({"status": "updated"}), 200
#
#     except ValidationError as e:
#         return jsonify({"error": str(e)}), 400
#     except Exception as e:
#         conn.rollback()
#         return jsonify({"error": str(e)}), 500
#     finally:
#         if 'conn' in locals():
#             conn.close()
#
#
# @app.route('/service/accidents/<int:accident_id>', methods=['PUT'])
# def update_accident(accident_id):
#     try:
#         # Валидация данных
#         update_data = AccidentCreate(**request.get_json())
#
#         conn = get_db_connection()
#         cur = conn.cursor()
#
#         # Обновление ДТП
#         cur.execute(
#             """
#             UPDATE bayandin_ponomarev.accidents
#             SET id_cars = %s, plate_num_cars = %s,
#                 date = %s, damage_description = %s
#             WHERE id_accidence = %s
#             RETURNING id_accidence;
#             """,
#             (update_data.id_cars, update_data.plate_num_cars,
#              update_data.date, update_data.damage_description, accident_id)
#         )
#
#         if not cur.fetchone():
#             return jsonify({"error": "Accident not found"}), 404
#
#         conn.commit()
#         return jsonify({"status": "updated"}), 200
#
#     except ValidationError as e:
#         return jsonify({"error": str(e)}), 400
#     except Exception as e:
#         conn.rollback()
#         return jsonify({"error": str(e)}), 500
#     finally:
#         if 'conn' in locals():
#             conn.close()
#
#
# @app.route('/service/cars/<int:car_id>', methods=['DELETE'])
# def delete_car(car_id):
#     try:
#         conn = get_db_connection()
#         cur = conn.cursor()
#
#         # Удаление машины
#         cur.execute(
#             "DELETE FROM bayandin_ponomarev.cars WHERE id = %s RETURNING id;",
#             (car_id,)
#         )
#
#         if not cur.fetchone():
#             return jsonify({"error": "Car not found"}), 404
#
#         conn.commit()
#         return jsonify({"status": "deleted"}), 200
#
#     except Exception as e:
#         conn.rollback()
#         return jsonify({"error": str(e)}), 500
#     finally:
#         if 'conn' in locals():
#             conn.close()
#
#
# @app.route('/service/accidents/<int:accident_id>', methods=['DELETE'])
# def delete_accident(accident_id):
#     try:
#         conn = get_db_connection()
#         cur = conn.cursor()
#
#         # Удаление ДТП
#         cur.execute(
#             "DELETE FROM bayandin_ponomarev.accidents WHERE id_accidence = %s RETURNING id_accidence;",
#             (accident_id,)
#         )
#
#         if not cur.fetchone():
#             return jsonify({"error": "Accident not found"}), 404
#
#         conn.commit()
#         return jsonify({"status": "deleted"}), 200
#
#     except Exception as e:
#         conn.rollback()
#         return jsonify({"error": str(e)}), 500
#     finally:
#         if 'conn' in locals():
#             conn.close()

# ... остальной код ...