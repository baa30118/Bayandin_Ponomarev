import psycopg2
from pydantic import BaseModel
from datetime import date


# Подключение к бд
database = "school_db"
user = "school"
password = "School1234*"
host = "79.174.88.238"
port = "15221"
# Создаём соединение с базой данных
conn = psycopg2.connect(database=database, user=user, password=password, host=host, port=port)

cur = conn.cursor()
migration = ""
with open("1.0 migration.sql") as f:
    migration = f.read()

# with conn.cursor() as cursor:
#     for st in migration.split(';'):
#         if st.strip():
#             cur.execute(st.strip())
#             print(f"Executed: {st.strip()}")


def load_accident(id):
    cur.execute(
        f'SELECT id_accidence, id_cars, plate_num_cars, "date", damage_description FROM bayandin_ponomarev.accidents WHERE id_accidence = %s;',
        (id,))

    car_accidents_info = cur.fetchall()

    return car_accidents_info

# Функции загрузки и сохранения, а также добавления ДТП
def load(id, param="="):  # load(car_id)
               # ---> ((id, model, year, color, plate_number, car_type), (id, id_cars, plate_num_cars, date, damage_description))

    cur.execute(f'SELECT id, model, "year", color, plate_number, car_type FROM bayandin_ponomarev.cars WHERE id {param} %s;',
                (id,))

    car_info = cur.fetchall()

    cur.execute(
        f'SELECT id_accidence, id_cars, plate_num_cars, "date", damage_description FROM bayandin_ponomarev.accidents WHERE id_cars {param} %s;',
        (id,))

    car_accidents_info = cur.fetchall()

    return (car_info, car_accidents_info)


def save(car_info,
         car_accidents=None):  # save(("Dodge Challenger", 2021, "Purple", "к355нм/71", "coupe"), ("y775yy/96, y777yy/99", "12.03.2025", "Повреждение правого крыла"))
                               # save((model, year, color, plate_number, car_type), (plate_num_cars, date, damage_description))
    model = car_info[0]
    year = car_info[1]
    color = car_info[2]
    plate_number = car_info[3]
    car_type = car_info[4]

    cur.execute(
        "INSERT INTO bayandin_ponomarev.cars (model, year, color, plate_number, car_type) VALUES (%s, %s, %s, %s, %s);",
        (model, year, color, plate_number, car_type))

    conn.commit()

    if car_accidents:
        add_accidents(plate_number, car_accidents)

    return "OK"


def add_accidents(plate_number,
                  car_accidents):  # add_accidents(plate_number, (plate_num_cars, date, damage_description))
                                   # add_accidents("y775yy/96", ("y777yy/99", "10.05.2025", "Повреждение заднего бампера"))
    cur.execute(
        'SELECT id, model, "year", color, plate_number, car_type FROM bayandin_ponomarev.cars WHERE plate_number = %s;',
        (plate_number,))

    id_cars = cur.fetchall()[0][0]

    plate_num_cars = car_accidents[0]
    date = car_accidents[1]
    damage_description = car_accidents[2]

    cur.execute(
        "INSERT INTO bayandin_ponomarev.accidents (id_cars, plate_num_cars, date, damage_description) VALUES (%s, %s, %s, %s);",
        (id_cars, plate_num_cars, date, damage_description))

    conn.commit()
    return "OK"


# Json
class Car(BaseModel):
    id: int
    model: str
    year: int
    color: str
    plate_number: str
    car_type: str


# Модель для ДТП
class Accident(BaseModel):
    id: int
    id_car: int
    plate_num_cars: str
    date: date
    damage_description: str


# Модель для ответа, включающего автомобиль и его ДТП
class CarWithAccidents(BaseModel):
    car: Car
    accidents: list[Accident]


